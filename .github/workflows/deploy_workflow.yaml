name: Build, Deploy and Manage Workflow

on:
  push:
    branches:
      - podman
  workflow_dispatch:

env:
  WORKFLOW_IMAGE_REGISTRY: ghcr.io
  WORKFLOW_IMAGE_NAMESPACE: ${{ github.repository_owner }}
  TARGET_NS: ${{ secrets.TARGET_NAMESPACE }}
  MANIFESTS_DIR: manifests/${{ github.sha }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-workflow:
    name: Build and Push Workflow Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Environment Variables
        run: |
          echo "Validating required variables..."
          REQUIRED_VARS=("WORKFLOW_IMAGE_REGISTRY" "WORKFLOW_IMAGE_NAMESPACE" "GITHUB_SHA" "TARGET_NS")

          if [[ -z "${{ secrets.WORKFLOW_FOLDER }}" ]]; then
            echo "::error:: WORKFLOW_FOLDER is not set in GitHub Secrets. Please configure it."
            exit 1
          fi
          echo "WORKFLOW_FOLDER=${{ secrets.WORKFLOW_FOLDER }}" >> $GITHUB_ENV

          MISSING_VARS=()
          for var in "${REQUIRED_VARS[@]}"; do
            if [[ -z "${!var}" ]]; then
              MISSING_VARS+=("$var")
            fi
          done

          if [[ ${#MISSING_VARS[@]} -gt 0 ]]; then
            echo "::error:: The following required variables are missing:"
            printf "::error:: - %s\n" "${MISSING_VARS[@]}"
            exit 1
          fi

      - name: Extract Workflow ID and Path
        run: |
          WORKFLOW_FOLDER="${{ secrets.WORKFLOW_FOLDER }}"
          WORKFLOW_PATH="${GITHUB_WORKSPACE}/${WORKFLOW_FOLDER}"
          WORKFLOW_ID=$(basename "${WORKFLOW_FOLDER}")

          echo "WORKFLOW_PATH=${WORKFLOW_PATH}" >> $GITHUB_ENV
          echo "WORKFLOW_ID=${WORKFLOW_ID}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${WORKFLOW_IMAGE_REGISTRY}/${WORKFLOW_IMAGE_NAMESPACE}/demo-${WORKFLOW_ID}" >> $GITHUB_ENV

      - name: Validate Workflow Directory
        run: |
          if [[ ! -d "$WORKFLOW_PATH" ]]; then
            echo "::error:: WORKFLOW_FOLDER '${WORKFLOW_FOLDER}' does not exist in the repository!"
            exit 1
          fi

      - name: Install Podman
        run: |
          sudo apt update
          sudo apt install -y podman

      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Image to GHCR
        run: |
          podman build -f resources/workflow-builder.Dockerfile \
            --build-arg WF_RESOURCES=${WORKFLOW_PATH} \
            --ulimit nofile=4096:4096 \
            --tag ${IMAGE_NAME}:${IMAGE_TAG} \
            --tag ${IMAGE_NAME}:latest .

          podman push ${IMAGE_NAME}:${IMAGE_TAG}
          podman push ${IMAGE_NAME}:latest

      - name: Make Image Public
        run: |
          IMAGE_REPO=$(echo "${IMAGE_NAME}" | sed 's|ghcr.io/||')
          curl -X PATCH https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${IMAGE_REPO}/visibility \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"visibility":"public"}'

  generate-manifests:
    name: Generate OpenShift Manifests
    runs-on: ubuntu-latest
    needs: build-workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Required CLI Tools
        run: |
          sudo apt update
          sudo apt install -y yq jq
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          curl -LO https://downloads.kogito.kie.org/tools/kn-workflow-cli/latest/kn-workflow-linux-amd64
          chmod +x kn-workflow-linux-amd64
          sudo mv kn-workflow-linux-amd64 /usr/local/bin/kn-workflow

      - name: Generate OpenShift Manifests
        run: |
          mkdir -p ${MANIFESTS_DIR}
          cd ${WORKFLOW_PATH}/src/main/resources
          echo -e "\nquarkus.flyway.migrate-at-start=true" >> application.properties
          kn-workflow gen-manifest

      - name: Handle Large ConfigMaps
        run: |
          CONFIG_FILE="${WORKFLOW_PATH}/src/main/resources/application.properties"
          MAX_SIZE=1048576  # 1MB

          if [[ $(wc -c <"$CONFIG_FILE") -gt $MAX_SIZE ]]; then
            split -b $MAX_SIZE "$CONFIG_FILE" "${CONFIG_FILE}_part_"
            for part in $(ls ${CONFIG_FILE}_part_*); do
              PART_NAME="config-part-$(basename $part)"
              yq --inplace ".metadata.name = \"$PART_NAME\"" "manifests/${PART_NAME}.yaml"
              yq --inplace ".data.\"config-part\" = \"$(base64 -w 0 < $part)\"" "manifests/${PART_NAME}.yaml"
            done
            PARENT_CONFIG="manifests/workflow-config-parent.yaml"
            yq --inplace ".metadata.name = \"workflow-config-parent\"" "$PARENT_CONFIG"
            yq --inplace ".data.childConfigs = \"$(ls ${CONFIG_FILE}_part_* | tr '\n' ',' | sed 's/,$//')\"" "$PARENT_CONFIG"
          fi

      - name: Commit Updated Manifests
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git add ${MANIFESTS_DIR}/*
          git commit -m "Updating OpenShift manifests for workflow ${WORKFLOW_ID} [GitHub Actions]" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

  deploy-to-openshift:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    needs: generate-manifests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install OpenShift CLI (oc)
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvzf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Log in to OpenShift
        run: |
          oc login --server=${{ secrets.OCP_API_SERVER }} --token=${{ secrets.OCP_API_TOKEN }} --insecure-skip-tls-verify=true

      - name: Apply OpenShift Manifests
        run: |
          TARGET_NS=${{ secrets.TARGET_NAMESPACE }}
          oc apply -f ${MANIFESTS_DIR} -n $TARGET_NS
