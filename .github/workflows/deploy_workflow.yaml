name: Build, Deploy and Manage Workflow

on:
  push:
    branches:
      - podman
  workflow_dispatch:

env:
  WORKFLOW_IMAGE_REGISTRY: ghcr.io
  WORKFLOW_IMAGE_NAMESPACE: ${{ github.repository_owner }}
  TARGET_NS: ${{ secrets.TARGET_NAMESPACE }}
  MANIFESTS_DIR: manifests/${{ github.sha }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-workflow:
    name: Build and Push Workflow Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Environment Variables
        run: |
          echo "DEBUG: Checking Environment Variables..."
          echo "GITHUB_WORKSPACE='${GITHUB_WORKSPACE}'"
          echo "WORKFLOW_FOLDER='${{ secrets.WORKFLOW_FOLDER }}'"

      - name: Validate Environment Variables
        run: |
          echo "Validating required variables..."
          REQUIRED_VARS=("WORKFLOW_IMAGE_REGISTRY" "WORKFLOW_IMAGE_NAMESPACE" "GITHUB_SHA" "TARGET_NS")

          if [[ -z "${{ secrets.WORKFLOW_FOLDER }}" ]]; then
            echo "::error:: WORKFLOW_FOLDER is not set in GitHub Secrets. Please configure it."
            exit 1
          fi
          echo "WORKFLOW_FOLDER=${{ secrets.WORKFLOW_FOLDER }}" >> $GITHUB_ENV

          MISSING_VARS=()
          for var in "${REQUIRED_VARS[@]}"; do
            if [[ -z "${!var}" ]]; then
              MISSING_VARS+=("$var")
            fi
          done

          if [[ ${#MISSING_VARS[@]} -gt 0 ]]; then
            echo "::error:: The following required variables are missing:"
            printf "::error:: - %s\n" "${MISSING_VARS[@]}"
            exit 1
          fi

      - name: Extract Workflow ID and Path
        run: |
          echo "DEBUG: Checking and setting WORKFLOW_PATH..."
          WORKFLOW_FOLDER="${{ secrets.WORKFLOW_FOLDER }}"
          WORKFLOW_PATH="${GITHUB_WORKSPACE}/${WORKFLOW_FOLDER}"
          WORKFLOW_ID=$(basename "$WORKFLOW_FOLDER")

          echo "Resolved WORKFLOW_PATH=${WORKFLOW_PATH}"
          echo "WORKFLOW_PATH=${WORKFLOW_PATH}" >> $GITHUB_ENV
          echo "WORKFLOW_ID=${WORKFLOW_ID}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${WORKFLOW_IMAGE_REGISTRY}/${WORKFLOW_IMAGE_NAMESPACE}/demo-${WORKFLOW_ID}" >> $GITHUB_ENV

          if [[ ! -d "$WORKFLOW_PATH" ]]; then
            echo "::error:: WORKFLOW_FOLDER '${WORKFLOW_FOLDER}' does not exist in the repository!"
            exit 1
          fi

      - name: Set Correct WF_RESOURCES Path and Copy Files
        run: |
          WF_RESOURCES="${WORKFLOW_FOLDER}/src/main/resources"

          if [[ ! -d "$WORKFLOW_PATH/src/main/resources" ]]; then
            echo "::error:: ERROR: The expected resources directory does not exist!"
            exit 1
          fi

          echo "Using WF_RESOURCES: $WF_RESOURCES"
          echo "WF_RESOURCES=${WF_RESOURCES}" >> $GITHUB_ENV

          mkdir -p build-context
          cp -r ${WORKFLOW_PATH} build-context/
          cp -r resources build-context/

      - name: Install Podman
        run: |
          sudo apt update
          sudo apt install -y podman

      - name: Log in to Red Hat Container Registry
        run: |
          echo "${{ secrets.REDHAT_REGISTRY_PASSWORD }}" | podman login registry.redhat.io -u ${{ secrets.REDHAT_REGISTRY_USERNAME }} --password-stdin

      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Image to GHCR
        run: |
          cd build-context
          podman build -f resources/workflow-builder.Dockerfile \
            --build-arg WF_RESOURCES=${WF_RESOURCES} \
            --build-arg FLOW_NAME="${WORKFLOW_ID}" \
            --build-arg FLOW_SUMMARY="Workflow ${WORKFLOW_ID}" \
            --build-arg FLOW_DESCRIPTION="Automated workflow deployment for ${WORKFLOW_ID}" \
            --ulimit nofile=4096:4096 \
            --tag ${IMAGE_NAME}:${IMAGE_TAG} \
            --tag ${IMAGE_NAME}:latest .

          podman push ${IMAGE_NAME}:${IMAGE_TAG}
          podman push ${IMAGE_NAME}:latest

  generate-manifests:
    name: Generate OpenShift Manifests
    runs-on: ubuntu-latest
    needs: build-workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Required CLI Tools
        run: |
          sudo apt update
          sudo apt install -y yq jq
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvzf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Install kn-workflow CLI using Podman
        run: |
          export KN_IMAGE=registry.redhat.io/openshift-serverless-1/logic-kn-workflow-cli-artifacts-rhel8:1.33.0
          echo "${{ secrets.REDHAT_REGISTRY_PASSWORD }}" | podman login registry.redhat.io \
            -u ${{ secrets.REDHAT_REGISTRY_USERNAME }} --password-stdin
          podman pull $KN_IMAGE
          export KN_CONTAINER_ID=$(podman run -di $KN_IMAGE)
          podman exec $KN_CONTAINER_ID ls -R /usr/share/kn/
          podman cp $KN_CONTAINER_ID:/usr/share/kn/linux_amd64/kn-workflow-linux-amd64.tar.gz .
          podman stop $KN_CONTAINER_ID
          podman rm $KN_CONTAINER_ID
          tar xvzf kn-workflow-linux-amd64.tar.gz

          if [[ -f "kn" ]]; then
            mv kn kn-workflow
          elif [[ -f "kn-workflow-linux-amd64" ]]; then
            mv kn-workflow-linux-amd64 kn-workflow
          else
            echo "::error:: kn-workflow binary missing!"
            exit 1
          fi

          sudo mv kn-workflow /usr/local/bin/kn-workflow
          chmod +x /usr/local/bin/kn-workflow
          which kn-workflow
          kn-workflow version

  generate-manifests:
    name: Generate OpenShift Manifests
    runs-on: ubuntu-latest
    needs: build-workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Workflow Path
        run: |
          echo "🔍 DEBUG: Checking workflow folder"
          echo "WORKFLOW_FOLDER=${{ secrets.WORKFLOW_FOLDER }}"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"

          WORKFLOW_PATH="${GITHUB_WORKSPACE}/${{ secrets.WORKFLOW_FOLDER }}"
          echo "Resolved WORKFLOW_PATH=${WORKFLOW_PATH}"

          if [[ ! -d "$WORKFLOW_PATH" ]]; then
            echo "::error:: ❌ ERROR: WORKFLOW_PATH does not exist!"
            ls -l ${GITHUB_WORKSPACE}
            exit 1
          fi

          echo "WORKFLOW_PATH=${WORKFLOW_PATH}" >> $GITHUB_ENV

      - name: Install Required CLI Tools
        run: |
          sudo apt update
          sudo apt install -y yq jq
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvzf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Install kn-workflow CLI using Podman
        run: |
          export KN_IMAGE=registry.redhat.io/openshift-serverless-1/logic-kn-workflow-cli-artifacts-rhel8:1.33.0
          echo "${{ secrets.REDHAT_REGISTRY_PASSWORD }}" | podman login registry.redhat.io -u ${{ secrets.REDHAT_REGISTRY_USERNAME }} --password-stdin
          podman pull $KN_IMAGE
          export KN_CONTAINER_ID=$(podman run -di $KN_IMAGE)
          podman exec $KN_CONTAINER_ID ls -R /usr/share/kn/
          podman cp $KN_CONTAINER_ID:/usr/share/kn/linux_amd64/kn-workflow-linux-amd64.tar.gz .
          podman stop $KN_CONTAINER_ID
          podman rm $KN_CONTAINER_ID
          tar xvzf kn-workflow-linux-amd64.tar.gz

          if [[ -f "kn" ]]; then
            mv kn kn-workflow
          elif [[ -f "kn-workflow-linux-amd64" ]]; then
            mv kn-workflow-linux-amd64 kn-workflow
          else
            echo "::error:: kn-workflow binary missing!"
            exit 1
          fi

          sudo mv kn-workflow /usr/local/bin/kn-workflow
          chmod +x /usr/local/bin/kn-workflow
          which kn-workflow
          kn-workflow version

      - name: Generate OpenShift Manifests
        run: |
          echo "📂 Creating manifests directory: ${MANIFESTS_DIR}"
          mkdir -p ${MANIFESTS_DIR}

          # Verify directory structure before proceeding
          if [[ ! -d "${WORKFLOW_PATH}/src/main/resources" ]]; then
            echo "::error:: ❌ ERROR: Directory ${WORKFLOW_PATH}/src/main/resources does not exist!"
            ls -l ${WORKFLOW_PATH}
            exit 1
          fi

          cd ${WORKFLOW_PATH}/src/main/resources

          # Append quarkus.flyway.migrate-at-start=true only if it's missing
          grep -qxF "quarkus.flyway.migrate-at-start=true" application.properties || \
          echo "quarkus.flyway.migrate-at-start=true" >> application.properties

          kn-workflow gen-manifest

      - name: Commit and Push Manifests
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git add ${MANIFESTS_DIR}/*
          git commit -m "Updating OpenShift manifests for workflow ${WORKFLOW_ID} [GitHub Actions]" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

