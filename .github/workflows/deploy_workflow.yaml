name: Build and Deploy Workflow

on:
  push:
    branches:
      - podman
  workflow_dispatch:

env:
  WORKFLOW_IMAGE_REGISTRY: ghcr.io
  WORKFLOW_IMAGE_NAMESPACE: ${{ github.repository_owner }}
  TARGET_NS: ${{ secrets.TARGET_NAMESPACE }}  # OpenShift namespace from repo secrets
  MANIFESTS_DIR: manifests/${{ github.sha }}  # Use commit SHA for versioning

jobs:
  build-workflow:
    name: Building the Workflow
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Workflow ID and Folder Name
        run: |
          echo "WORKFLOW_ID=$(basename $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "WORKFLOW_FOLDER=$(basename $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "GHCR_IMAGE=${{ env.WORKFLOW_IMAGE_REGISTRY }}/${{ env.WORKFLOW_IMAGE_NAMESPACE }}/$(basename $GITHUB_WORKSPACE):latest" >> $GITHUB_ENV

      - name: Install Podman
        run: |
          sudo apt update
          sudo apt install -y podman

      - name: Log in to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Image to GHCR
        run: |
          cd ..
          ./scripts/build-push.sh ${WORKFLOW_ID} ${WORKFLOW_FOLDER} ${WORKFLOW_IMAGE_REGISTRY} ${WORKFLOW_IMAGE_NAMESPACE}

  generate-manifests:
    name: Generating OpenShift Manifests
    runs-on: ubuntu-latest
    needs: build-workflow

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate OpenShift Manifests
        run: |
          mkdir -p ${MANIFESTS_DIR}
          ./scripts/gen-manifest.sh ${WORKFLOW_ID} ${WORKFLOW_FOLDER} ${WORKFLOW_IMAGE_REGISTRY} ${WORKFLOW_IMAGE_NAMESPACE}
          cp -r <path to generated manifests>/* ${MANIFESTS_DIR}/

      - name: Commit Updated Manifests to the Same Branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout ${{ github.ref_name }}
          git add ${MANIFESTS_DIR}/*
          git commit -m "Updating OpenShift manifests for workflow ${WORKFLOW_ID} [GitHub Actions]" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

  deploy-workflow:
    name: Deploying the Workflow
    runs-on: ubuntu-latest
    needs: generate-manifests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvzf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Log in to OpenShift
        run: |
          oc login ${{ secrets.OCP_API_URL }} --token=${{ secrets.OCP_TOKEN }} --insecure-skip-tls-verify=true

      - name: Auto-Split Large ConfigMaps & Create a Parent ConfigMap
        run: |
          MAX_SIZE=1048576  # 1MB limit per ConfigMap
          
          for cm in ${MANIFESTS_DIR}/*-configmap.yaml; do
            if [[ -f "$cm" ]]; then
              SIZE=$(wc -c < "$cm")
              
              if [[ $SIZE -gt $MAX_SIZE ]]; then
                echo "ConfigMap $cm exceeds 1MB ($SIZE bytes). Splitting..."
                
                METADATA=$(yq '.metadata' "$cm")
                DATA=$(yq '.data' "$cm")
                DATA_JSON=$(echo "$DATA" | yq -o=json)
                TOTAL_KEYS=$(echo "$DATA_JSON" | jq 'keys | length')

                PART=1
                CURRENT_SIZE=0
                TEMP_DATA="{}"
                PART_NAMES=()

                for ((i=0; i<TOTAL_KEYS; i++)); do
                  KEY=$(echo "$DATA_JSON" | jq -r ". | keys[$i]")
                  VALUE=$(echo "$DATA_JSON" | jq -r ".[\"$KEY\"]")
                  KEY_SIZE=$(echo -n "$KEY: $VALUE" | wc -c)

                  if [[ $((CURRENT_SIZE + KEY_SIZE)) -gt $MAX_SIZE ]]; then
                    OUTPUT_FILE="${cm%.yaml}-part${PART}.yaml"
                    PART_NAME=$(yq '.metadata.name' "$cm")"-part${PART}"
                    PART_NAMES+=("$PART_NAME")

                    echo "$METADATA" | yq -o=json | jq ".metadata.name = \"$PART_NAME\"" | yq -P > "$OUTPUT_FILE"
                    echo "$TEMP_DATA" | jq '.' | yq -P >> "$OUTPUT_FILE"

                    PART=$((PART + 1))
                    TEMP_DATA="{}"
                    CURRENT_SIZE=0
                  fi

                  TEMP_DATA=$(echo "$TEMP_DATA" | jq ". + {\"$KEY\": \"$VALUE\"}")
                  CURRENT_SIZE=$((CURRENT_SIZE + KEY_SIZE))
                done

                OUTPUT_FILE="${cm%.yaml}-part${PART}.yaml"
                PART_NAME=$(yq '.metadata.name' "$cm")"-part${PART}"
                PART_NAMES+=("$PART_NAME")

                echo "$METADATA" | yq -o=json | jq ".metadata.name = \"$PART_NAME\"" | yq -P > "$OUTPUT_FILE"
                echo "$TEMP_DATA" | jq '.' | yq -P >> "$OUTPUT_FILE"

                PARENT_CONFIGMAP="${cm%.yaml}-parent.yaml"
                echo "$METADATA" | yq -o=json | jq ".metadata.name = \"$(yq '.metadata.name' "$cm")-parent\"" | yq -P > "$PARENT_CONFIGMAP"
                yq eval ".data.part-names = \"${PART_NAMES[*]}\"" -i "$PARENT_CONFIGMAP"

                rm "$cm"
              fi
            fi
          done

      - name: Apply OpenShift Manifests
        run: |
          oc -n ${TARGET_NS} apply -f ${MANIFESTS_DIR}/00-secret_*.yaml
          oc -n ${TARGET_NS} apply -f ${MANIFESTS_DIR}/02-configmap_*-props.yaml
          oc -n ${TARGET_NS} apply -f ${MANIFESTS_DIR}/01-sonataflow_*.yaml
